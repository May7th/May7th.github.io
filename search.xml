<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title></title>
      <url>%2F2017%2F04%2F17%2F%E3%80%90java%E5%9F%BA%E7%A1%80%E3%80%91%E5%B9%B6%E8%A1%8C%2F</url>
      <content type="text"><![CDATA[title: 【java基础】并发date: 2017-04-17 22:28:09tags:java基础 ​ 编程问题中相当大的部分都可以通过顺序编程来解决，但是对于一些问题，如果能够并行地执行程序中的多个部分，就会变得非常方便。 假如想要一个程序运行的更快，那么就应该将其分成多个片段，在单独的处理器上运行每个片段来提高速度。但是，并发通常也可以提高单处理器 运行程序的性能。 ​ 由于增加了上下文切换的代价，在单处理器上并发运行的开销其实是要比顺序运行的开销更大的，但是，在顺序运行时可能会有其他更严重的问题——程序阻塞。程序中的某个任务因为某些问题导致不能继续执行，由于没有并发，所以整个程序都将停止下来，直到问题解决才能继续执行。但是，如果使用并发编程，那么当任务阻塞时，程序的其他任务依然可以继续执行。从性能的角度看，这也是使用并发编程的意义。 1.进程和线程 进程：是正在执行中的程序，每一个进程都有一个执行的顺序，该顺序是一个执行路径 ，或者称为一个控制单元 。 线程：是进程 中的独立控制单元，线程控制着进程的执行。 每个进程中至少存在一个线程 java 虚拟机启动的时候会有一个进程，该进程中至少有一个线程负责java程序的执行，而且这个线程运行的代码存在于main 方法中，该线程又称为主线程。 jvm启动时，负责垃圾回收机制的线程也同时启动。 2.如何自定义一个线程创建新执行线程有两种方法1.将类声明为 Thread 的子类 定义类继承Thread类。 重写Thread类中的run方法。 1234567891011class PrimeThread extends Thread &#123; long minPrime; PrimeThread(long minPrime) &#123; this.minPrime = minPrime; &#125; public void run() &#123; // compute primes larger than minPrime . . . &#125; &#125; 使用线程的start方法，创建、启动线程。 12PrimeThread p = new PrimeThread(143); p.start(); 2.声明实现 Runnable 接口的类 自定义类实现Runnable的接口。 实现接口中的run 方法。 1234567891011class PrimeRun implements Runnable &#123; long minPrime; PrimeRun(long minPrime) &#123; this.minPrime = minPrime; &#125; public void run() &#123; // compute primes larger than minPrime . . . &#125; &#125; 创建自定义类的实例，将其作为参数传递到Thread 中并启动线程. 12PrimeRun p = new PrimeRun(143); new Thread(p).start();]]></content>
    </entry>

    
  
  
</search>
